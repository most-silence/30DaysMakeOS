     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式	
     5 00000000                                 [INSTRSET "i486p"]				; 使用到486为止的指令
     6 00000000                                 [BITS 32]						; 3制作32位模式用的机器语言
     7 00000000                                 [FILE "naskfunc.nas"]			; 文件名
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    15 00000000                                 		GLOBAL  _asm_inthandler20
    16 00000000                                 		GLOBAL _load_cr0, _store_cr0, _memtest_sub
    17 00000000                                 		EXTERN	_inthandler21, _inthandler27, _inthandler2c, _inthandler20
    18 00000000                                 
    19                                          [SECTION .text]
    20 00000000                                 
    21 00000000                                 _io_hlt:	; void io_hlt(void);
    22 00000000 F4                              		HLT
    23 00000001 C3                              		RET
    24 00000002                                 
    25 00000002                                 _io_cli:	; void io_cli(void);
    26 00000002 FA                              		CLI
    27 00000003 C3                              		RET
    28 00000004                                 
    29 00000004                                 _io_sti:	; void io_sti(void);
    30 00000004 FB                              		STI
    31 00000005 C3                              		RET
    32 00000006                                 
    33 00000006                                 _io_stihlt:	; void io_stihlt(void);
    34 00000006 FB                              		STI
    35 00000007 F4                              		HLT
    36 00000008 C3                              		RET
    37 00000009                                 
    38 00000009                                 _io_in8:	; int io_in8(int port);
    39 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    40 0000000D B8 00000000                     		MOV		EAX,0
    41 00000012 EC                              		IN		AL,DX
    42 00000013 C3                              		RET
    43 00000014                                 
    44 00000014                                 _io_in16:	; int io_in16(int port);
    45 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    46 00000018 B8 00000000                     		MOV		EAX,0
    47 0000001D 66 ED                           		IN		AX,DX
    48 0000001F C3                              		RET
    49 00000020                                 
    50 00000020                                 _io_in32:	; int io_in32(int port);
    51 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    52 00000024 ED                              		IN		EAX,DX
    53 00000025 C3                              		RET
    54 00000026                                 
    55 00000026                                 _io_out8:	; void io_out8(int port, int data);
    56 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    57 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    58 0000002E EE                              		OUT		DX,AL
    59 0000002F C3                              		RET
    60 00000030                                 
    61 00000030                                 _io_out16:	; void io_out16(int port, int data);
    62 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    63 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    64 00000038 66 EF                           		OUT		DX,AX
    65 0000003A C3                              		RET
    66 0000003B                                 
    67 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    68 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    69 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    70 00000043 EF                              		OUT		DX,EAX
    71 00000044 C3                              		RET
    72 00000045                                 
    73 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    74 00000045 9C                              		PUSHFD		; PUSH EFLAGS 
    75 00000046 58                              		POP		EAX
    76 00000047 C3                              		RET
    77 00000048                                 
    78 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    79 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    80 0000004C 50                              		PUSH	EAX
    81 0000004D 9D                              		POPFD		; POP EFLAGS 
    82 0000004E C3                              		RET
    83 0000004F                                 
    84 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    85 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    86 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    87 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    88 0000005E C3                              		RET
    89 0000005F                                 
    90 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    91 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    92 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    93 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    94 0000006E C3                              		RET
    95 0000006F                                 
    96 0000006F                                 _asm_inthandler20: 
    97 0000006F 06                                      PUSH    ES 
    98 00000070 1E                                      PUSH    DS 
    99 00000071 60                                      PUSHAD 
   100 00000072 89 E0                                   MOV     EAX,ESP 
   101 00000074 50                                      PUSH    EAX 
   102 00000075 66 8C D0                                MOV     AX,SS 
   103 00000078 8E D8                                   MOV     DS,AX 
   104 0000007A 8E C0                                   MOV     ES,AX 
   105 0000007C E8 [00000000]                           CALL    _inthandler20 
   106 00000081 58                                      POP     EAX 
   107 00000082 61                                      POPAD 
   108 00000083 1F                                      POP     DS 
   109 00000084 07                                      POP     ES 
   110 00000085 CF                                      IRETD
   111 00000086                                 
   112 00000086                                 _asm_inthandler21:
   113 00000086 06                              		PUSH	ES
   114 00000087 1E                              		PUSH	DS
   115 00000088 60                              		PUSHAD
   116 00000089 89 E0                           		MOV		EAX,ESP
   117 0000008B 50                              		PUSH	EAX
   118 0000008C 66 8C D0                        		MOV		AX,SS
   119 0000008F 8E D8                           		MOV		DS,AX
   120 00000091 8E C0                           		MOV		ES,AX
   121 00000093 E8 [00000000]                   		CALL	_inthandler21
   122 00000098 58                              		POP		EAX
   123 00000099 61                              		POPAD
   124 0000009A 1F                              		POP		DS
   125 0000009B 07                              		POP		ES
   126 0000009C CF                              		IRETD
   127 0000009D                                 
   128 0000009D                                 _asm_inthandler27:
   129 0000009D 06                              		PUSH	ES
   130 0000009E 1E                              		PUSH	DS
   131 0000009F 60                              		PUSHAD
   132 000000A0 89 E0                           		MOV		EAX,ESP
   133 000000A2 50                              		PUSH	EAX
   134 000000A3 66 8C D0                        		MOV		AX,SS
   135 000000A6 8E D8                           		MOV		DS,AX
   136 000000A8 8E C0                           		MOV		ES,AX
   137 000000AA E8 [00000000]                   		CALL	_inthandler27
   138 000000AF 58                              		POP		EAX
   139 000000B0 61                              		POPAD
   140 000000B1 1F                              		POP		DS
   141 000000B2 07                              		POP		ES
   142 000000B3 CF                              		IRETD
   143 000000B4                                 
   144 000000B4                                 _asm_inthandler2c:
   145 000000B4 06                              		PUSH	ES
   146 000000B5 1E                              		PUSH	DS
   147 000000B6 60                              		PUSHAD
   148 000000B7 89 E0                           		MOV		EAX,ESP
   149 000000B9 50                              		PUSH	EAX
   150 000000BA 66 8C D0                        		MOV		AX,SS
   151 000000BD 8E D8                           		MOV		DS,AX
   152 000000BF 8E C0                           		MOV		ES,AX
   153 000000C1 E8 [00000000]                   		CALL	_inthandler2c
   154 000000C6 58                              		POP		EAX
   155 000000C7 61                              		POPAD
   156 000000C8 1F                              		POP		DS
   157 000000C9 07                              		POP		ES
   158 000000CA CF                              		IRETD
   159 000000CB                                 
   160 000000CB                                 _load_cr0:      ; int load_cr0(void); 
   161 000000CB 0F 20 C0                                MOV     EAX,CR0 
   162 000000CE C3                                      RET
   163 000000CF                                 
   164 000000CF                                 
   165 000000CF                                 _store_cr0:     ; void store_cr0(int cr0); 
   166 000000CF 8B 44 24 04                             MOV     EAX,[ESP+4] 
   167 000000D3 0F 22 C0                                MOV     CR0,EAX 
   168 000000D6 C3                                      RET
   169 000000D7                                 
   170 000000D7                                 _memtest_sub:   ; unsigned int memtest_sub(unsigned int start, unsigned int end) 
   171 000000D7 57                                      PUSH    EDI                     ;  （由于还要使用EBX, ESI, EDI） 
   172 000000D8 56                                      PUSH    ESI 
   173 000000D9 53                                      PUSH    EBX 
   174 000000DA BE AA55AA55                             MOV     ESI,0xaa55aa55          ; pat0 = 0xaa55aa55; 
   175 000000DF BF 55AA55AA                             MOV     EDI,0x55aa55aa          ; pat1 = 0x55aa55aa; 
   176 000000E4 8B 44 24 10                             MOV     EAX,[ESP+12+4]          ; i = start; 
   177 000000E8                                 mts_loop: 
   178 000000E8 89 C3                                   MOV     EBX,EAX 
   179 000000EA 81 C3 00000FFC                          ADD     EBX,0xffc               ; p = i + 0xffc; 
   180 000000F0 8B 13                                   MOV     EDX,[EBX]               ; old = *p; 
   181 000000F2 89 33                                   MOV     [EBX],ESI               ; *p = pat0; 
   182 000000F4 83 33 FF                                XOR     DWORD [EBX],0xffffffff  ; *p ^= 0xffffffff; 
   183 000000F7 3B 3B                                   CMP     EDI,[EBX]               ; if (*p != pat1) goto fin; 
   184 000000F9 75 18                                   JNE     mts_fin 
   185 000000FB 83 33 FF                                XOR     DWORD [EBX],0xffffffff  ; *p ^= 0xffffffff; 
   186 000000FE 3B 33                                   CMP     ESI,[EBX]               ; if (*p != pat0) goto fin; 
   187 00000100 75 11                                   JNE     mts_fin 
   188 00000102 89 13                                   MOV     [EBX],EDX               ; *p = old; 
   189 00000104 05 00001000                             ADD     EAX,0x1000              ; i += 0x1000; 
   190 00000109 3B 44 24 14                             CMP     EAX,[ESP+12+8]          ; if (i <= end) goto mts_loop; 
   191 0000010D                                  
   192 0000010D 76 D9                                  JBE     mts_loop 
   193 0000010F 5B                                      POP     EBX 
   194 00000110 5E                                      POP     ESI 
   195 00000111 5F                                      POP     EDI 
   196 00000112 C3                                      RET 
   197 00000113                                 mts_fin: 
   198 00000113 89 13                                   MOV     [EBX],EDX               ; *p = old; 
   199 00000115 5B                                      POP     EBX 
   200 00000116 5E                                      POP     ESI 
   201 00000117 5F                                      POP     EDI 
   202 00000118 C3                                      RET