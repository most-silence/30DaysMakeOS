     1 00000000                                 [FORMAT "WCOFF"]
     2 00000000                                 [INSTRSET "i486p"]
     3 00000000                                 [OPTIMIZE 1]
     4 00000000                                 [OPTION 1]
     5 00000000                                 [BITS 32]
     6 00000000                                 	EXTERN	_wait_KBC_sendready
     7 00000000                                 	EXTERN	_io_out8
     8 00000000                                 	EXTERN	_io_in8
     9 00000000                                 	EXTERN	_fifo32_put
    10 00000000                                 [FILE "mouse.c"]
    11                                          [SECTION .text]
    12 00000000                                 	GLOBAL	_mouse_decode
    13 00000000                                 _mouse_decode:
    14 00000000 55                              	PUSH	EBP
    15 00000001 89 E5                           	MOV	EBP,ESP
    16 00000003 56                              	PUSH	ESI
    17 00000004 53                              	PUSH	EBX
    18 00000005 8B 55 08                        	MOV	EDX,DWORD [8+EBP]
    19 00000008 8B 4D 0C                        	MOV	ECX,DWORD [12+EBP]
    20 0000000B 89 CE                           	MOV	ESI,ECX
    21 0000000D 8A 42 03                        	MOV	AL,BYTE [3+EDX]
    22 00000010 84 C0                           	TEST	AL,AL
    23 00000012 75 11                           	JNE	L2
    24 00000014 80 F9 FA                        	CMP	CL,-6
    25 00000017 74 06                           	JE	L10
    26 00000019                                 L9:
    27 00000019 31 C0                           	XOR	EAX,EAX
    28 0000001B                                 L1:
    29 0000001B 5B                              	POP	EBX
    30 0000001C 5E                              	POP	ESI
    31 0000001D 5D                              	POP	EBP
    32 0000001E C3                              	RET
    33 0000001F                                 L10:
    34 0000001F C6 42 03 01                     	MOV	BYTE [3+EDX],1
    35 00000023 EB F4                           	JMP	L9
    36 00000025                                 L2:
    37 00000025 3C 01                           	CMP	AL,1
    38 00000027 74 61                           	JE	L11
    39 00000029 3C 02                           	CMP	AL,2
    40 0000002B 74 54                           	JE	L12
    41 0000002D 3C 03                           	CMP	AL,3
    42 0000002F 74 05                           	JE	L13
    43 00000031 83 C8 FF                        	OR	EAX,-1
    44 00000034 EB E5                           	JMP	L1
    45 00000036                                 L13:
    46 00000036 8A 1A                           	MOV	BL,BYTE [EDX]
    47 00000038 81 E6 000000FF                  	AND	ESI,255
    48 0000003E 89 D8                           	MOV	EAX,EBX
    49 00000040 88 4A 02                        	MOV	BYTE [2+EDX],CL
    50 00000043 83 E0 07                        	AND	EAX,7
    51 00000046 89 72 08                        	MOV	DWORD [8+EDX],ESI
    52 00000049 89 42 0C                        	MOV	DWORD [12+EDX],EAX
    53 0000004C 88 D8                           	MOV	AL,BL
    54 0000004E 0F B6 4A 01                     	MOVZX	ECX,BYTE [1+EDX]
    55 00000052 83 E0 10                        	AND	EAX,16
    56 00000055 89 4A 04                        	MOV	DWORD [4+EDX],ECX
    57 00000058 C6 42 03 01                     	MOV	BYTE [3+EDX],1
    58 0000005C 84 C0                           	TEST	AL,AL
    59 0000005E 74 09                           	JE	L7
    60 00000060 81 C9 FFFFFF00                  	OR	ECX,-256
    61 00000066 89 4A 04                        	MOV	DWORD [4+EDX],ECX
    62 00000069                                 L7:
    63 00000069 83 E3 20                        	AND	EBX,32
    64 0000006C 84 DB                           	TEST	BL,BL
    65 0000006E 74 07                           	JE	L8
    66 00000070 81 4A 08 FFFFFF00               	OR	DWORD [8+EDX],-256
    67 00000077                                 L8:
    68 00000077 F7 5A 08                        	NEG	DWORD [8+EDX]
    69 0000007A B8 00000001                     	MOV	EAX,1
    70 0000007F EB 9A                           	JMP	L1
    71 00000081                                 L12:
    72 00000081 88 4A 01                        	MOV	BYTE [1+EDX],CL
    73 00000084 C6 42 03 03                     	MOV	BYTE [3+EDX],3
    74 00000088 EB 8F                           	JMP	L9
    75 0000008A                                 L11:
    76 0000008A 88 0A                           	MOV	BYTE [EDX],CL
    77 0000008C C6 42 03 02                     	MOV	BYTE [3+EDX],2
    78 00000090 EB 87                           	JMP	L9
    79 00000092                                 	GLOBAL	_enable_mouse
    80 00000092                                 _enable_mouse:
    81 00000092 55                              	PUSH	EBP
    82 00000093 89 E5                           	MOV	EBP,ESP
    83 00000095 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
    84 00000098 A3 [00000000]                   	MOV	DWORD [_mousefifo],EAX
    85 0000009D 8B 45 0C                        	MOV	EAX,DWORD [12+EBP]
    86 000000A0 A3 [00000004]                   	MOV	DWORD [_mousedata0],EAX
    87 000000A5 E8 [00000000]                   	CALL	_wait_KBC_sendready
    88 000000AA 68 000000D4                     	PUSH	212
    89 000000AF 6A 64                           	PUSH	100
    90 000000B1 E8 [00000000]                   	CALL	_io_out8
    91 000000B6 E8 [00000000]                   	CALL	_wait_KBC_sendready
    92 000000BB 68 000000F4                     	PUSH	244
    93 000000C0 6A 60                           	PUSH	96
    94 000000C2 E8 [00000000]                   	CALL	_io_out8
    95 000000C7 8B 45 10                        	MOV	EAX,DWORD [16+EBP]
    96 000000CA C6 40 03 00                     	MOV	BYTE [3+EAX],0
    97 000000CE C9                              	LEAVE
    98 000000CF C3                              	RET
    99 000000D0                                 	GLOBAL	_inthandler2c
   100 000000D0                                 _inthandler2c:
   101 000000D0 55                              	PUSH	EBP
   102 000000D1 89 E5                           	MOV	EBP,ESP
   103 000000D3 6A 64                           	PUSH	100
   104 000000D5 68 000000A0                     	PUSH	160
   105 000000DA E8 [00000000]                   	CALL	_io_out8
   106 000000DF 6A 62                           	PUSH	98
   107 000000E1 6A 20                           	PUSH	32
   108 000000E3 E8 [00000000]                   	CALL	_io_out8
   109 000000E8 6A 60                           	PUSH	96
   110 000000EA E8 [00000000]                   	CALL	_io_in8
   111 000000EF 03 05 [00000004]                	ADD	EAX,DWORD [_mousedata0]
   112 000000F5 50                              	PUSH	EAX
   113 000000F6 FF 35 [00000000]                	PUSH	DWORD [_mousefifo]
   114 000000FC E8 [00000000]                   	CALL	_fifo32_put
   115 00000101 C9                              	LEAVE
   116 00000102 C3                              	RET
   117 00000103                                 	GLOBAL	_mousefifo
   118                                          [SECTION .data]
   119 00000000                                 	ALIGNB	4
   120 00000000                                 _mousefifo:
   121 00000000 00 00 00 00                     	RESB	4
   122 00000004                                 	GLOBAL	_mousedata0
   123                                          [SECTION .data]
   124 00000004                                 	ALIGNB	4
   125 00000004                                 _mousedata0:
   126 00000004 00 00 00 00                     	RESB	4
